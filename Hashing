Hashing in Java is a technique for mapping data to a secret key, that can be used as a unique identifier for data. 
It employs a function that generates those keys from the data; this function is known as the Hash-function, 
and the output of this function (keys) is known as Hash-values. 
To provide quick access to the data, we store it as key(Hash values) value(real data) pairs in an array called Hash-table, 
which uses keys as indexes and values as the data to be stored at each index location.

//frequency counter to query freq of element from array without HashMap 
//TC : This method iterates over the full array of size 'N' for each of the 'Q' queries ,
//so the time complexity will be O(N*Q) .
import java.util.*;
public class Main
{
	public static void main(String[] args) {
    int[] a = {1, 3, 3, 4, 1, 4, 4, 4, 4}; //given Array
    int[] queries = {4,1};
    //below loops run with TC O(N*Q) and SC = 0
    for (int i = 0 ; i < queries.length ;i++) {
        int qry = queries[i];
        int frq = 0;
        for (int j = 0 ; j < a.length ; j++) {
            if (a[j] == qry) frq++;
            }
            System.out.println(qry + " " + frq);
        } 
	}
}
//4 5
//1 2


data ---------> Hash Function ------------ > HashValue (Key) 
Key(HashValue) is unique identifier of the data .
(key,data)  pair is stored in array called HashTable as key as indexes and values as the data to be stored at that index.
Hashing is basically as data structure that stores data effitiently to solve problems. TC O(1)
https://www.scaler.com/topics/java/what-is-hashing-in-java/


//simple array hash table to query from array a with time complexity O(1);
//Time Complexity : As we are running a single for loop , O(N) time is required , to answer all the queries , we iterate over the queries and answer each one of them in O(1) time as we have all the answers pre calculated :-) 
//So , total time taken : O(N+Q).

//Space Complexity : We created an extra array of size 'N' , which is array 'b' . So space taken is O(N) by the algorithm.

import java.util.*;
public class Main
{
	public static void main(String[] args) {
    int[] a = {1, 3, 3, 4, 1, 4, 4, 4, 4}; //given Array
    int[] queries = {4,1};
    int[] b = new int[a.length + 1];
    //create frequency table using array
    for (int i = 0 ; i < a.length ; i++) {
        int x = a[i];
        b[x]++;
        } 
    //each query below has TC O(1)
    for (int i = 0 ; i < queries.length ; i++ ) {
        int qry = queries[i];
        System.out.println(qry + " " + b[qry]);
        	} 
	}
}

HashSet stores unique elements without any associated values, while HashMap stores key-value pairs where the keys are unique identifiers and the values are associated data.

HashSet is a collection that stores unique elements, meaning it does not allow duplicate values. It is implemented using a hash table, which means the elements are stored in a hash table using their hash code as the key. This makes it very efficient to add, remove, and search for elements.
In a HashSet, the elements are not stored in any particular order. This means that when you iterate over the elements, the order in which you receive them is not guaranteed. 
HashSet does not provide any methods to retrieve the elements in a specific order.

HashMap is a data structure that stores key-value pairs in a hash table. 
It allows you to access the values based on the keys, and it guarantees constant time complexity for most operations. 
This means that HashMap is particularly useful when you need to quickly retrieve data based on a specific key.
In a HashMap, the keys are unique, but the values may be duplicated. This means that you can have multiple keys with the same value.
Like HashSet, HashMap does not provide any methods to retrieve the elements in a specific order.

[C++]unordered_set<int> b : On an average , each operation like insert , find and delete takes O(1) time on average . 
Worst Case can take O(N) time for each operation but it rarely occurs.

[C++]set<int> b : On an average , each operation like insert , find and delete takes O(logN) time on average . 
Worst Case will also take O(logN) time for each operation . 
Thats the advantage over unordered_set<int>b. All elements are stored in sorted order.

In Java, properties of HashSet is very similar to that of unordered_set in C++. 
It implements set interface which ensures no duplicate elements are present in hashset. 
The insertion of an object in hashset is based on its hash value, therefore when you iterate over hashset the order of elements that you'll get will most probably be different than how they were entered in the hashset. 
Hash value is the unique value of an object generated by a hash function to uniquely identify an object.

[Java]HashSet<Integer> set : Average time complexity for add, remove and look-up operation of HashSet is O(1). 
Worst case time complexity is O(N) which rarely occurs.

[Java]TreeSet<Integer> set : On an average , each operation like insert , find and delete takes O(logN) time on average .
Worst Case will also take O(logN) time for each operation. Thats the advantage over HashSet<Integer> set. All elements are stored in sorted order.


In C++, unordered_map<int,int> b : On an average , each operation like insert , find and delete takes O(1) time on average .
Worst Case can take O(N) time for each operation but it rarely occurs. 

map<int,int> b : On an average , each operation like insert , find and delete takes O(logN) time on average . 
Worst Case will also take O(logN) time for each operation . 
Thats the advantage over unordered_map<int,int> b. All keys maintain sorted order.

In Java, HashMap<Integer, String> map : Average time complexity is O(1) and worst case time complexity is O(n). 
Similar to unordered_map in C++.

https://docs.google.com/document/d/1e_JQXvnEwq5Gp_JGHpny7f6EVb5lecjncIydU7twPao/edit
https://docs.google.com/document/d/1zadjci7AJqGgPFkn0d_FV9LIX6blVJKZCfneYM6F2mc/edit


HashSet example 
//HashSet example : check if arr2 is subset of arr1 
//(Note duplicates are not present so Hashset can be used)

//solution : create Hashset for arr1 and check for every element in arr2 from that Hashset
// even if 1 element from arr2 misses in Hashset then arr2 is not subset of arr1 else otherwise.
import java.util.*;
public class Main{
	public static void main(String[] args) {
        int[] arr1 = {6,7,3,2};
        int[] arr2 = {2,3};  
        Set <Integer> arr1set = new HashSet<>();
        for (int i = 0 ; i < arr1.length ; i++ ) {
            arr1set.add(arr1[i]);
        }
        for (int i = 0; i < arr2.length ; i++ ) {
            if (!arr1set.contains(arr2[i])) {
                System.out.println("arr2 is not subset of arr1");
                return;
            }
        }
        System.out.println("arr2 is subset of arr1");
	}
}


HashMap example : frequency counter for large array


import java.util.*;
public class Main{
	public static void main(String[] args) {
    int[] a = {1,3,3,4,1,4,4,4,4}; // array
    Map <Integer,Integer> hmap = new HashMap<>();
    for (int i = 0 ; i < a.length ; i++) {
        int count = hmap.getOrDefault(a[i], 0) + 1;
        hmap.put(a[i],count);
        }
        //Below for loop took O(q) time.Hence total TC : O(n+q).        
    int[] queries = {4,1};
    for (int i = 0; i < queries.length; i++) {
        int qry = queries[i];
        int output = hmap.getOrDefault(qry,0);
        System.out.println((qry + " " + output));
        } 
	}
}
//4 5
//1 2

frequence query using brute force is O(N*Q) : all elements must be in range 1 to N.
frequency query using frequncy array counter O(N+Q) : all elements must be in range 1 to N; space complexity O(N)
frequency query using HashMap O(N) : no limitations on range of elements
Check if the given array is subset of another array with duplicates present (HashMap to be used instead of HashSet)

//check if arr2 is part of arr1 (Note duplicates can be present in arr1 and/or arr2)
import java.util.*;
public class Main{
	public static void main(String[] args) {
    int[] arr1 = {6,7,3,2,2};
    int[] arr2 = {6,7,2,2};
    boolean ans = IsSubset(arr1,arr2);
    if(ans) System.out.println("arr2 is a subset of arr1");
    else System.out.println("arr2 is not a subset of arr1");    
	}
	static boolean IsSubset(int[] arr1 , int[] arr2) {
	    if (arr1.length < arr2.length) return false;
		//element:freq map
	    Map <Integer,Integer> hmap = new HashMap<>();
	    for (Integer i : arr1) {
	        int CountofI = hmap.getOrDefault(i,0) +1;
	        hmap.put(i,CountofI);
	    }
	    for (Integer i : arr2) {
	        if (!hmap.containsKey(i)) return false;
	        if (hmap.get(i) == 0) return false;
	        else {
	            int CountofI = hmap.get(i) -1;
	            hmap.put(i,CountofI);
	        }
	    }
	    return true;
	}
}

//Minimum operations to make all elements equal in an array.
//find the most frequent element in the array . then (n - Maxfrequency) of most freq element is the answer.
import java.util.*;
public class Main{
	public static void main(String[] args) {
    int[] arr = {1, 2, 1, 4, 3, 1};
    int ans = AllElementsEQ(arr);
    System.out.println(ans);
	}
	static int AllElementsEQ(int[] arr) {
    Map <Integer,Integer> fmap = new HashMap<>();
    for (int i = 0; i < arr.length ; i++ ) {
        int count = fmap.getOrDefault(arr[i],0) + 1;
        fmap.put(arr[i] , count);
        } 
        int Maxfreq = 0;
        for (Map.Entry<Integer,Integer> entry : fmap.entrySet()) {
            if (entry.getValue() > Maxfreq) Maxfreq = entry.getValue();
        }
        System.out.println(arr.length + " " + Maxfreq);
        return (arr.length - Maxfreq);
	}
}


check if array contains duplicate elements within k distances from each other
// create HashMap element:position 
//for each element check the current elements position - position of same element in hashmap if present <= k return true

import java.util.*;
public class Main
{  
	public static void main(String[] args) {
    int arr[] = {10, 5, 3, 4, 3, 5, 6};
    int n = arr.length;
    int k = 3;
    boolean ans = checkDuplicatesWithinK(arr,k);
    if (ans) System.out.println("Yes");
    else System.out.println("No");
	}
	static boolean checkDuplicatesWithinK(int[] arr , int k) {
	    Map <Integer,Integer> hmap = new HashMap<>();
	    for (int i = 0; i < arr.length; i++ ) {
	        if (!hmap.containsKey(arr[i])) {
	            hmap.put(arr[i] ,i);
	        }
	        else {
	            int hpos = hmap.get(arr[i]);
	            if (i - hpos <= k) return true;
	        }
	    }
	    return false;
	}
}



video 1
import java.util.*;
//find the frequency of element using freq HashMap
public class Main
{
	public static void main(String[] args) {
		int[] a = {1, 3, 3, 4, 1, 4, 4, 4, 4}; //given Array
		int n = a.length;
		Map<Integer,Integer> hmap = new HashMap<>();
		for (int i = 0 ; i < n  ;i++ ){
		    //<element,freq> hmap is created
		    int count = hmap.getOrDefault(a[i],0) + 1;
		    hmap.put(a[i],count);
		}
		int[] queries = {4,1};
		for (int i = 0 ; i < queries.length ; i++) {
		    int x = queries[i]; //key to be searched in hmap
		    int output = hmap.getOrDefault(x,0);
		    System.out.println(output + " ");
		} 
	}
}
//5,2

//HashMap as indexMap.
//two sum : given array of numbers and target return index of a pair that sum up to target.
//assume there is only 1 pair that sum up to target. order in pair doesnot matter.
import java.util.*;

public class Main
{
	public static void main(String[] args) {
    int[] a = {3,4,6,5,8,2,1};
    int target = 12;
    //<element,index> indexMap
    //avg TC of HashMap is O(1); worst case is O(N).
    Map <Integer,Integer> indexMap = new HashMap<>();
    for (int i = 0 ; i < a.length ; i++) {
        int remaining = target - a[i];
        if(indexMap.containsKey(remaining)) {
            System.out.println(indexMap.get(remaining) + " " +  i);
        }
        else {
            indexMap.put(a[i],i);
        }
      } 
	}
}
//1 4

//Given array of integers and a query that has two integers.
//output the sum of subarray that lies between two integer indexes.
//prefixsum algorithm
import java.util.*;
//TC = O(N+Q)  SC = O(N).

public class Main
{
	public static void main(String[] args) {
    int[] a = {2,4,3,1,6,5,7,3,2};
    int[] prefixsum = new int[a.length];
    Arrays.fill(prefixsum,0);
    prefixsum[0] = a[0];
    for (int i = 1; i < a.length ; i++ ) {
        prefixsum[i] = prefixsum[i-1] + a[i];
        }
    int l = 3 , r = 8;
    System.out.println(prefixsum[r] - prefixsum[l-1]);
	}
}
//24


//Given array with repeated elements , find max distance b/n two occurances of same element.
//TC and SC O(N)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] arr = {3,2,1,3,4,1,2,3}; //given array
		int MaxDistance = 0; //let MaxDistance be initialized to 0
		//HashMap <element,firstoccurance of element>
		Map <Integer,Integer> IndexMap = new HashMap<>();
		//for every element , check the index Distance if key present in HashMap
		//else add element,index of first occurance to HashMap.
		for (int i = 0; i < arr.length ; i++) {
		    if (IndexMap.containsKey(arr[i])) {  //if key exists
		    //calculate the Max Distance
		        MaxDistance = Math.max(MaxDistance, i - IndexMap.get(arr[i]));
		    }
		    else {
		        //else add the key to HashMap
		        IndexMap.put(arr[i],i);
		    }
		} 
		System.out.println(MaxDistance);
	}
}
//7

//Given array of integer N and target k , find no of pairs of elements whose sum = k.
//TC and SC O(N)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] arr= {5,3,5,7,4,2,4,8,5};
		int k = 12;
		int Maxpairs = 0;
		//HashMap <element,freq>
		HashMap <Integer,Integer> freqMap = new HashMap<>();
        for (int i = 0; i < arr.length ; i++) {
            int a = arr[i];
            int diff = k - a;
            //for every occurance of element freq needs to be incremented.
            freqMap.put(a,freqMap.getOrDefault(a,0) + 1);
            if (freqMap.containsKey(diff)) {
                Maxpairs += freqMap.get(diff);
            }
        }
        System.out.println(Maxpairs);
	}
}
//5

//Given a string return first non repeating character in that string , if no return -1
//solution : create freq HashMap for characters , then query through hashmap and break when found
import java.util.*;

public class Main
{
	public static void main(String[] args) {
		char[] strArray = {'a','b','c','a','b','a','c','b','a','d','c','e'};
		int ans = LastIndex(strArray);
		System.out.println(ans);
	}
	static int LastIndex(char[] strArray){
	    Map<Character,Integer> charCountMap = new HashMap<>();
	    for (char c : strArray) {
	            charCountMap.put(c,charCountMap.getOrDefault(c,0) + 1);
	        }
        for (int i = 0 ; i < strArray.length ; i++) {
            if (charCountMap.get(strArray[i]) == 1) {
                return i; //return as soon as condition is satisfied as we need to find first non repeating char
                }
            }
        return -1; //return -1 if not found such element
	}
}

//given string of words , output all the characters that show up in all strings within the words.
//including duplicates.
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		String[] words = {"ookloo","ookkl","ooollk","oolka"};
		Map <Character,Integer> MinFreqhmap = new HashMap<>();
		//Min freq Hashmap for all characters a to z
		for (char ch = 'a'; ch <= 'z' ;ch++ ) {
		    MinFreqhmap.put(ch,1000);
		}
		for (String word : words) {
		    Map <Character,Integer> freqhmap = new HashMap<>();
		    for (int i = 0 ; i < word.length() ; i++) {
		        char c = word.charAt(i);
		        freqhmap.put(c,freqhmap.getOrDefault(c,0) + 1);
		    }
		    //for every word update MinFreqHashMap with Values to minimum
		    for (char ch = 'a'; ch <= 'z' ;ch++) {
		        int MinCount = Math.min(MinFreqhmap.get(ch),freqhmap.getOrDefault(ch,0));
		        MinFreqhmap.put(ch,MinCount);
		    } 
		}
		List <Character> lst = new ArrayList<>();
		for(char ch = 'a';ch <= 'z';ch++) {
		    while (MinFreqhmap.get(ch) > 0) {
		        lst.add(ch);
		        MinFreqhmap.put(ch,MinFreqhmap.get(ch) - 1);
		    }
		}
		System.out.println(lst);
		
	}
}


//given unsorted array of integers , return the length of longest consecutive elements sequence in O(N)
//use two HashMaps present and checked to get to solution with TC O(N)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] nums = {100,4,200,1,3,2};
		Map <Integer,Boolean> present = new HashMap<>();
		Map <Integer,Boolean> checked = new HashMap<>();
		for (Integer num : nums) {
		    present.put(num,true);
		}
		int longestConsChain = 0;
		
		for (Integer num : nums) {
		    boolean presentCheck = present.getOrDefault(num - 1,false);
//given num is not checked in checked HashMap && num-1 not present in present HashMap
		    if (!checked.containsKey(num) && !presentCheck) {
		        int CurrentChainLen = 0;
		        int start = num;
		        while(present.containsKey(start)) {
		            CurrentChainLen++;
		            checked.put(start,true);
		            start++;
		        }
		        longestConsChain = Math.max(longestConsChain,CurrentChainLen);
		    }
		}
		System.out.println(longestConsChain);
	}
}

//given unsorted array of integers , return the length of longest consecutive elements sequence in O(N)
//use two HashMaps present and checked to get to solution with TC O(N) SC O(N)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] nums = {15,-2,2,-8,1,7,10,23};
		Map <Integer,Integer> PrefixSumhmap = new HashMap<>();
		//PrefixSumhmap.put(nums[0],0);
		int sum = 0;
		int longestChain = 0;
		for (int i = 0 ; i < nums.length ; i++) {
		    int CurrentLen = 0;
            sum += nums[i];
		    if (sum == 0) longestChain = i + 1;
		    else {
		        //<sum,firstOccurance> of prefixSum is stored in HashMap
		        if (!PrefixSumhmap.containsKey(sum)) {
		            PrefixSumhmap.put(sum,i);
		        }
		        else {
		            CurrentLen = i - PrefixSumhmap.get(sum); //curent index - firstOccurance
		            longestChain = Math.max (longestChain,CurrentLen);
		        }		        
		    }
		    
		} 
		System.out.println(longestChain);
       //for( Map.Entry<Integer, Integer> e : PrefixSumhmap.entrySet()) {
        //   System.out.print(e.getKey() + " ");
        //   System.out.println(e.getValue()); }
	}
}
