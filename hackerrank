https://www.hackerrank.com/challenges/compare-the-triplets/problem?isFullScreen=true

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      int size = 3;
      int[] Aarr;
      int[] Barr;
      int Acount = 0, Bcount = 0;
      Aarr = new int[size];
      Barr = new int[size];
      for (int i = 0; i < Aarr.length; i++) {
        Aarr[i] = in.nextInt();
      }
      for (int i = 0; i < Barr.length; i++) {
          Barr[i] = in.nextInt();
      }
      for (int i = 0; i < size; i++) {
          if (Aarr[i] > Barr[i]) Acount++;
          else if (Barr[i] > Aarr[i]) Bcount++;
      }
      System.out.print(Acount + " " + Bcount);
    }
}



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;



https://www.hackerrank.com/challenges/a-very-big-sum/problem?isFullScreen=true
public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      int n ;
      n = in.nextInt();
      long sum = 0;
      long[] arr;
        // allocating memory for 5 integers.
      arr = new long[n];
      //read all integers of array using for loop 
      for(int i = 0 ;i<n;i++){
          arr[i] = in.nextLong(); //reading arr elements
          sum += arr[i]; //calculate sum of arr elements
      }
      System.out.println(sum);
      
    }
}



https://www.hackerrank.com/challenges/diagonal-difference/problem

public class MyClass {
    public static void main(String args[]) {
      
      Scanner in = new Scanner(System.in);
      int size ;  //size of square matrix
      int c1 = 0 , c2 = 0;
      int[][] arr; //init array
      size = in.nextInt(); //reading size of array
      arr = new int[size][size]; //create array
      for (int i = 0; i < size; i++) {
          for (int j = 0; j < size; j++) {
              arr[i][j] = in.nextInt(); 
              if ( i+1 == j+1) c1 += arr[i][j];
              if (i+j+2 == size + 1)  c2 += arr[i][j];
          }
      }
      System.out.println(Math.abs(c1 - c2));
    }
}



https://www.hackerrank.com/challenges/plus-minus/problem
public class MyClass {
    
    public static void main(String args[]) {
      
      Scanner in = new Scanner(System.in);
      int size;
      size = in.nextInt();
      int[] A;
      A = new int[size];
      int P = 0 , N = 0 , O = 0;
      for (int i = 0; i < A.length; i++) {
            A[i] = in.nextInt();
            if (A[i] > 0) P++;
            else if (A[i] < 0) N++;
            else O++;
        }
      System.out.println((float)P/size);
      System.out.println((float)N/size);
      System.out.println((float)O/size);   
    }
}


https://www.hackerrank.com/challenges/staircase/problem
     #
    ##
   ###
  ####
 #####
######

public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      int N;
      N = in.nextInt();
      for (int i = 0; i < N; i++) {
          for (int j = 0; j < N - i - 1; j++) {
              System.out.print(" ");
          }
          for (int j = 0; j < i + 1; j++) {
              System.out.print("#");              
          }
          System.out.println();
      }
    }
}

https://www.hackerrank.com/challenges/mini-max-sum/problem

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.util.Arrays;

public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      int n = 5; //size of array
      long[] A = new long[n];
      long Max = 0 , Min = 0;
      for (int i = 0; i < n; i++) {
          A[i] = in.nextLong();
      }
      Arrays.sort(A);
      for (int i = 0; i < n; i++) {
          if (i != n -1) {
              Min += A[i];
          }
          if (i != 0) {
              Max += A[i];
          }
      }
      System.out.println(Min + " " + Max);
    }
}


https://www.hackerrank.com/challenges/birthday-cake-candles/problem

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


public class MyClass {
    public static void main(String args[]) {
      Scanner in = new Scanner(System.in);
      int n = in.nextInt();
      int[] candles = new int[n];
      int Max = 0 , Count = 0;
      for (int i = 0; i < candles.length; i++) {
          candles[i] = in.nextInt();
          if (candles[i] > Max) {
              Max = candles[i];
              Count = 1;
          }
          else if (candles[i] == Max) Count++;
      }
      System.out.println(Count);
    }
}



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

https://www.hackerrank.com/challenges/time-conversion/problem?isFullScreen=true

public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      String S = in.next();
      String Indicator = S.substring(8,10);
      String Hour = S.substring(0,2);
      int Hr = Integer.parseInt(Hour);
      if (Indicator.equals("PM") && Hr != 12) {
          Hr = Hr + 12;
          System.out.println(Hr + S.substring(2,8));
      }
      else if (Indicator.equals("PM") && Hr == 12){
          System.out.println(S.substring(0,8));
      }      
      else if (Indicator.equals("AM") && Hr == 12){
          System.out.println("00"+S.substring(2,8));
      }
      else {
          System.out.println(S.substring(0,8));
      }
    }
}



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


public class MyClass {
    public static void main(String args[]) {
      
      
      Scanner in = new Scanner(System.in);
      int n ;
      n = in.nextInt();
      int[] A = new int[n];
      for (int i = 0; i < A.length; i++) {
          A[i] = in.nextInt();
          if (A[i] < 38) continue;
          else {
              int Quotientof5 = A[i] / 5;
              int nextMultipleof5 = (Quotientof5 + 1) * 5;
              int diff = nextMultipleof5 - A[i];
              if ( diff < 3) A[i] = nextMultipleof5;
          }
      }
      for (Integer num: A) {
          System.out.println(num);
      }
    }
}

https://www.hackerrank.com/challenges/camelcase/problem
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class MyClass {
    public static void main(String args[]) {
    Scanner in = new Scanner(System.in);
    String str = in.next(); //reading input string
    int upper = 0;
    for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (ch >= 'A' && ch <= 'Z')  //count characters in capital
                upper++;        
    }
    System.out.println(upper + 1);
    }
}


https://www.hackerrank.com/challenges/reduced-string/problem?isFullScreen=true

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class MyClass {
    public static void main(String args[]) {
    Scanner in = new Scanner(System.in);
    String str = in.next();
    for (int i = 0; i < str.length() - 1; i++) {
        char ch1 = str.charAt(i);
        char ch2 = str.charAt(i+1);
        if (ch1 == ch2) {
            str = str.replace(str.substring(i,i+2), "");
            i = -1;
        }
        if(str.isEmpty()) {
            System.out.println("Empty String");
        }
    }
    System.out.println(str);
    }
}

https://www.hackerrank.com/challenges/kangaroo/problem
    public static String kangaroo(int x1, int v1, int x2, int v2) {
    // Write your code here
    //since x2 > x1 given , if v2 > v1 return NO
    if (v2 > v1) return "NO";
    int gap = Math.abs(x2 - x1); //calculate initial gap between two kangaroos
    while (x2 != x1) {
        x1 = x1 + v1;
        x2 = x2 + v2;
        int newgap = Math.abs(x2 - x1);
        if (newgap >= gap) return "NO"; //gap should be decreasing inorder to meet
    }
    return "YES";

    }


Assuming both do n jumps, their distances functions are

y1 = f(k1) = x1 + n * v1; // straight line equation
y2 = f(k2) = x2 + n * v2; //straight line equation
Both lines will intersect if y1 = y2 after n jumps (n has to be positive integer. Hence,

==> x1 + n * v1 =  x2 + n * v2
==> n = (x2 - x1) / (v1 - v2)
Notice something? since x2 > x1 (kangaroo 1 starts from behind, rules says 0 <= x1 < x2 <= 10000), the ratio n can only be positive if v1 > v2 (kangaroo 1 has to have higher speed to catch up with kangaroo 2. Slower kangaroo can't catch up from behind. We check, either n is integer or if dx divides dv.

string kangaroo(int x1, int v1, int x2, int v2) {
    if (v1  <  v2) {
        return "NO";
    }
    
    if ((x2 - x1) % (v1 - v2) == 0) {
        return "YES";
    }
    
    return "NO";
}


https://www.hackerrank.com/challenges/breaking-best-and-worst-records/problem

    public static List<Integer> breakingRecords(List<Integer> scores) {
    // Write your code here
    int min = scores.get(0);
    int max = scores.get(0);
    int minCount = 0, maxCount = 0;
    for (int num : scores) {
        if (num < min ) {
            min = num;
            minCount++;
        }
        else if (num > max) {
            max = num ;
            maxCount++;
        }
    }
    List <Integer> ans = Arrays.asList(maxCount , minCount);
    return ans;
    }

}


https://www.hackerrank.com/challenges/the-birthday-bar/problem
//the below code is O(N2)
    public static int birthday(List<Integer> s, int d, int m) {
    int sum = 0 ,  count = 0;
    for (int i = 0; i <= s.size() - m; i++) {
        for (int j = i; j < i + m; j++) {
            sum += s.get(j);
        }
        if (sum == d) {
            count++;
        }
        sum = 0;
    }
    return count;
    }

}
below code is O(N)
public static int birthday(List<Integer> s, int d, int m) {
        int start, end;
        start=0;
        end=m-1;
        int count, sum;
        count=sum=0;
        for(int i=0;i<=end;i++){
            sum+=s.get(i);
        }
        
        if(sum==d){
            count++;
        }
        
        while(end!=s.size()-1){
            sum-=s.get(start);
            start++;
            end++;
            sum+=s.get(end);
            if(sum==d){
                count++;
            }
        }
        
        return count;
    }

https://www.hackerrank.com/challenges/divisible-sum-pairs/problem   
//O(N2)
 public static int divisibleSumPairs(int n, int k, List<Integer> ar) {
    // Write your code here
    int count = 0;
    for (int i = 0; i < ar.size() - 1; i++)   {
        for (int j = i + 1; j < ar.size(); j++) {
            
            if ((ar.get(i) + ar.get(j)) % k == 0) count++;
        }
    }
    return count;
    }



https://www.hackerrank.com/challenges/migratory-birds/problem

    public static int migratoryBirds(List<Integer> arr) {
    // Write your code here
    int BirdTypeID;
    int BirdTypeCount;
    HashMap <Integer,Integer> hm = new HashMap<>();
    for (int i = 0; i < arr.size(); i++) {
        int CountofID = hm.getOrDefault(arr.get(i), 0);
        hm.put(arr.get(i), CountofID + 1);
    }
    BirdTypeID = 0;
    BirdTypeCount = 0;    
    Set<Integer> keys = hm.keySet();
       for(Integer key : keys) {
           if(hm.get(key) > BirdTypeCount){
               BirdTypeID = key;
               BirdTypeCount = hm.get(key);
           }
           if (hm.get(key) == BirdTypeCount && BirdTypeID > key) {
               BirdTypeID = key;
           }
       }
        return BirdTypeID;

    }


https://www.hackerrank.com/challenges/counting-valleys/problem

    public static int countingValleys(int steps, String path) {
    // Write your code here
        int StepCount = 0;
        int sum = 0;
        int ValleyCount = 0;
        int PrevSum = 0;
        for (int i = 0; i < path.length(); i++) {
            PrevSum = sum;
            char ch = path.charAt(i);
            if (ch == 'U') sum += 1;
            else sum -= 1;
        if( sum == 0 && PrevSum < 0) ValleyCount++;            
        }
        return ValleyCount;
    }


https://www.hackerrank.com/challenges/the-hurdle-race/problem?isFullScreen=true

    public static int hurdleRace(int k, List<Integer> height) {
    // Write your code here
    int Max = height.get(0); or Integer.MIN_INT
    for (int i = 1; i < height.size(); i++) {  or start from i = 0
        if ( height.get(i) > Max) Max = height.get(i);
    }
    if (k >= Max) return 0;
    else return (Max - k);

    }






